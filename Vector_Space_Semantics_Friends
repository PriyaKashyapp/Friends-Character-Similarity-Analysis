{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vector Space Semantics for Similarity between Friends Characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in /opt/conda/lib/python3.10/site-packages (3.8.1)\n",
      "Requirement already satisfied: click in /opt/conda/lib/python3.10/site-packages (from nltk) (8.1.7)\n",
      "Requirement already satisfied: joblib in /opt/conda/lib/python3.10/site-packages (from nltk) (1.3.2)\n",
      "Requirement already satisfied: regex>=2021.8.3 in /opt/conda/lib/python3.10/site-packages (from nltk) (2023.12.25)\n",
      "Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from nltk) (4.66.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /home/jovyan/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "import re\n",
    "import numpy as np\n",
    "from numpy.linalg import norm\n",
    "import pandas as pd\n",
    "from collections import Counter, OrderedDict\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import math\n",
    "\n",
    "import nltk\n",
    "\n",
    "from nltk import ngrams, pos_tag\n",
    "\n",
    "from sklearn.feature_extraction import DictVectorizer\n",
    "\n",
    "%matplotlib inline\n",
    "pd.options.display.max_colwidth=500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Episode</th>\n",
       "      <th>Scene</th>\n",
       "      <th>Character_name</th>\n",
       "      <th>Line</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>s01e01</td>\n",
       "      <td>c01</td>\n",
       "      <td>Monica Geller</td>\n",
       "      <td>There's nothing to tell! He's just some guy I work with!</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s01e01</td>\n",
       "      <td>c01</td>\n",
       "      <td>Joey Tribbiani</td>\n",
       "      <td>C'mon, you're going out with the guy! There's gotta be something wrong with him!</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s01e01</td>\n",
       "      <td>c01</td>\n",
       "      <td>Chandler Bing</td>\n",
       "      <td>All right Joey, be nice. So does he have a hump? A hump and a hairpiece?</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>s01e01</td>\n",
       "      <td>c01</td>\n",
       "      <td>Phoebe Buffay</td>\n",
       "      <td>Wait, does he eat chalk?</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s01e01</td>\n",
       "      <td>c01</td>\n",
       "      <td>Phoebe Buffay</td>\n",
       "      <td>Just, 'cause, I don't want her to go through what I went through with Carl- oh!</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53548</th>\n",
       "      <td>s03e25</td>\n",
       "      <td>c12</td>\n",
       "      <td>Ross Geller</td>\n",
       "      <td>Hi.</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53549</th>\n",
       "      <td>s03e25</td>\n",
       "      <td>c13</td>\n",
       "      <td>Chandler Bing</td>\n",
       "      <td>Hi there.</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53550</th>\n",
       "      <td>s03e25</td>\n",
       "      <td>c13</td>\n",
       "      <td>Monica Geller</td>\n",
       "      <td>That's that weird voice again.</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53551</th>\n",
       "      <td>s03e25</td>\n",
       "      <td>c13</td>\n",
       "      <td>Chandler Bing</td>\n",
       "      <td>Okay! Okay! Let me try it again, you're gonna wanna date this next guy, I swear!</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53552</th>\n",
       "      <td>s03e25</td>\n",
       "      <td>c13</td>\n",
       "      <td>Chandler Bing</td>\n",
       "      <td>Hi! I'm Dorf! You're date for the evening. Oh come on! Dorf on dating, that's good stuff!!</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53553 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Episode Scene  Character_name  \\\n",
       "0      s01e01   c01   Monica Geller   \n",
       "1      s01e01   c01  Joey Tribbiani   \n",
       "2      s01e01   c01   Chandler Bing   \n",
       "3      s01e01   c01   Phoebe Buffay   \n",
       "4      s01e01   c01   Phoebe Buffay   \n",
       "...       ...   ...             ...   \n",
       "53548  s03e25   c12     Ross Geller   \n",
       "53549  s03e25   c13   Chandler Bing   \n",
       "53550  s03e25   c13   Monica Geller   \n",
       "53551  s03e25   c13   Chandler Bing   \n",
       "53552  s03e25   c13   Chandler Bing   \n",
       "\n",
       "                                                                                             Line  \\\n",
       "0                                        There's nothing to tell! He's just some guy I work with!   \n",
       "1                C'mon, you're going out with the guy! There's gotta be something wrong with him!   \n",
       "2                        All right Joey, be nice. So does he have a hump? A hump and a hairpiece?   \n",
       "3                                                                        Wait, does he eat chalk?   \n",
       "4                 Just, 'cause, I don't want her to go through what I went through with Carl- oh!   \n",
       "...                                                                                           ...   \n",
       "53548                                                                                         Hi.   \n",
       "53549                                                                                   Hi there.   \n",
       "53550                                                              That's that weird voice again.   \n",
       "53551            Okay! Okay! Let me try it again, you're gonna wanna date this next guy, I swear!   \n",
       "53552  Hi! I'm Dorf! You're date for the evening. Oh come on! Dorf on dating, that's good stuff!!   \n",
       "\n",
       "       Gender  \n",
       "0      Female  \n",
       "1        Male  \n",
       "2        Male  \n",
       "3      Female  \n",
       "4      Female  \n",
       "...       ...  \n",
       "53548    Male  \n",
       "53549    Male  \n",
       "53550  Female  \n",
       "53551    Male  \n",
       "53552    Male  \n",
       "\n",
       "[53553 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load in training data and display in pandas dataframe\n",
    "train_path='training.csv'\n",
    "train_data = pd.read_csv(train_path,  delimiter=\"\\t\", skip_blank_lines = True)\n",
    "val_path ='val.csv'\n",
    "val_data = pd.read_csv(val_path,  delimiter=\"\\t\", skip_blank_lines = True)\n",
    "test_path ='test.csv'\n",
    "test_data = pd.read_csv(test_path,  delimiter=\"\\t\", skip_blank_lines = True)\n",
    "\n",
    "# Inspect\n",
    "train_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Add dialogue context and scene features**\n",
    "\n",
    "Two dictionaries, `character_docs` and `character_line_count`, are created to store the concatenated lines and count of lines for each character, respectively. DataFrame is **grouped by 'Episode' and 'Scene'** to process dialogue scene by scene as asked in question. The given function prints the line counts for each character and returns the character_docs dictionary, which contains the processed text for each character.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_character_document_from_dataframe(df, max_line_count):\n",
    "\n",
    "    character_docs = {}\n",
    "    character_line_count = {}\n",
    "    grouped_val_data = df.groupby(['Episode', 'Scene'])\n",
    "    for (_, scene_df), (line, name, _) in zip(grouped_val_data, zip(df.Line, df.Character_name, df.Gender)):\n",
    "        \n",
    "        # Remove empty lines\n",
    "        if (isinstance(line, float) and math.isnan(line)) or line == \"\":\n",
    "            continue\n",
    " \n",
    "        if not name in character_docs.keys():\n",
    "            character_docs[name] = \"\"\n",
    "            character_line_count[name] = 0\n",
    " \n",
    "        if character_line_count[name] == max_line_count:\n",
    "            continue\n",
    " \n",
    "        # Get the lines spoken by other characters in the same scene\n",
    "        context_lines = scene_df.loc[scene_df['Character_name'] != name, 'Line'].tolist()\n",
    " \n",
    "        # Join the context lines and the target character's line with end-of-line token\n",
    "        context = \" _EOL_ \".join(map(str, context_lines))\n",
    "        character_docs[name] += context + \" _EOL_ \" + str(line) + \" _EOL_ \"\n",
    "        character_line_count[name] += 1\n",
    " \n",
    "    print(\"lines per character\", character_line_count)\n",
    "    return character_docs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lines per character {'Monica Geller': 300, 'Joey Tribbiani': 281, 'Chandler Bing': 300, 'Phoebe Buffay': 282, '#ALL#': 59, 'Ross Geller': 300, 'Rachel Green': 300, 'Other_None': 255, 'Other_Female': 92, 'Other_Male': 42}\n",
      "Num. Characters:  10 \n",
      "\n",
      "Monica Geller Number of Words:  55403\n",
      "Joey Tribbiani Number of Words:  54203\n",
      "Chandler Bing Number of Words:  63186\n",
      "Phoebe Buffay Number of Words:  58795\n",
      "#ALL# Number of Words:  11233\n",
      "Ross Geller Number of Words:  56625\n",
      "Rachel Green Number of Words:  57637\n",
      "Other_None Number of Words:  57361\n",
      "Other_Female Number of Words:  18252\n",
      "Other_Male Number of Words:  10429\n",
      "total words 443124\n"
     ]
    }
   ],
   "source": [
    "# print out the number of words each character has in the training set\n",
    "#Â only use the first 300 lines of each character\n",
    "train_character_docs = create_character_document_from_dataframe(train_data, max_line_count=300)\n",
    "print('Num. Characters: ',len(train_character_docs.keys()),\"\\n\")\n",
    "total_words = 0\n",
    "for name in train_character_docs.keys():\n",
    "    print(name, 'Number of Words: ',len(train_character_docs[name].split()))\n",
    "    total_words += len(train_character_docs[name].split())\n",
    "print(\"total words\", total_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "import string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: contractions in /opt/conda/lib/python3.10/site-packages (0.1.73)\n",
      "Requirement already satisfied: textsearch>=0.0.21 in /opt/conda/lib/python3.10/site-packages (from contractions) (0.0.24)\n",
      "Requirement already satisfied: anyascii in /opt/conda/lib/python3.10/site-packages (from textsearch>=0.0.21->contractions) (0.3.2)\n",
      "Requirement already satisfied: pyahocorasick in /opt/conda/lib/python3.10/site-packages (from textsearch>=0.0.21->contractions) (2.0.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install contractions\n",
    "import contractions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Improve pre-processing**  \n",
    "\n",
    "\n",
    "**Tokenization:** converts all the text in character_text to lowercase, **word_tokenize(character_text.lower())**: This function takes the preprocessed lowercase text and tokenizes it into individual words. It identifies word boundaries in the text and separates them into a list of words.\n",
    "\n",
    "**Stopwords Removal:** Stopwords are common words that occur frequently in a language but often don't contribute much to the meaning of a sentence (Commented for better results)\n",
    "\n",
    "**Punctuation Removal:** Punctuation marks like periods, commas, exclamation marks, etc., often don't carry specific meaning in many NLP tasks. Removing them helps streamline the analysis by focusing on words that carry more semantic we\n",
    "\n",
    "**Lemmatization:** Lemmatization aims to transform words to a common base to normalize variations of a word so that they can be analyzed as a single item.\n",
    "\n",
    "**Expand contractions:** If a contraction is found, it replaces it with its expanded form. If the word is not a contraction, it remains unchanged.This process is beneficial because it ensures that contractions are converted to their complete forms, allowing for better text normalization and consistency in the text data.\n",
    "\n",
    "(contractions are shortened forms of words or phrases that combine two words into one by omitting certain letters, often replaced by an apostrophe. For instance, \"can't\" is a contraction of \"cannot,\" and \"we'll\" is a contraction of \"we will.\")\n",
    "\n",
    "**Removing Non-Alphabetic Characters and Single-Character Tokens:** Keep only alphabetic tokens with more than one character.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pre_process(character_text):\n",
    "    \"\"\"Pre-process all the concatenated lines of a character, \n",
    "    using tokenization, spelling normalization and other techniques.\n",
    "    \n",
    "    Initially just a tokenization on white space. Improve this for Q1.\n",
    "    \n",
    "    ::character_text:: a string with all of one character's lines\n",
    "    \"\"\"\n",
    "    # prepossessing techniques ( mini 5 )\n",
    "    \n",
    "    #1 just a simple tokenization, to be replaced\n",
    "    # tokens = character_text.split()   \n",
    "    \n",
    "    # Tokenization\n",
    "    tokens = word_tokenize(character_text.lower())\n",
    "    \n",
    "    # Removing stopwords\n",
    "    # stop_words = set(stopwords.words('english'))\n",
    "    # tokens = [word for word in tokens if word not in stop_words]\n",
    "    \n",
    "    # Punctuation removal\n",
    "    # tokens = [word for word in tokens if word not in stop_words and word not in string.punctuation]\n",
    "    tokens = [word for word in tokens if word not in string.punctuation]\n",
    "\n",
    "    # Remove non-alphabetic characters and single-character tokens\n",
    "    tokens = [re.sub(r'[^a-zA-Z]', '', word) for word in tokens if len(word) > 1]\n",
    "\n",
    "    # Expand contractions\n",
    "    tokens = [contractions.fix(word) for word in tokens]\n",
    "    \n",
    "    # Lemmatization\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
    "    \n",
    "    return tokens\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create list of pairs of (character name, pre-processed character) \n",
    "training_corpus = [(name, pre_process(doc)) for name, doc in sorted(train_character_docs.items())]\n",
    "train_labels = [name for name, doc in training_corpus]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Improve linguistic feature extraction**\n",
    "\n",
    "**Here's a breakdown of the code:**\n",
    "\n",
    "Iterates through `extra_features` and adds a count of 1 to the `counts` dictionary for each feature.\n",
    "\n",
    "**Extracting n-grams:** Generates n-grams (sequences of n words) of different lengths (example bigrams ) to capture word order and context.\n",
    "   \n",
    "**Adding POS Tags:** Uses a Part-of-Speech (POS) tagger to identify the grammatical role of each word (e.g., noun, verb, adjective).\n",
    "\n",
    "**Applying Sentiment Analysis:** Uses TextBlob to extract sentiment polarity (positive, negative, neutral) from the text. `(Commented for best results)`\n",
    "\n",
    "**Including Other Features:** Calls `extract_other_features()` and `predict_gender()` for additional features. `(Did not include for best results)`\n",
    "\n",
    "Creates a new dictionary `features` to combine all features and Adds counts of n-grams and POS tags using Counter, Includes sentiment score, other features, gender prediction, and extra features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_feature_vector_dictionary(character_doc, extra_features):\n",
    "    \"\"\"Converts a list of pre-processed tokens and extra features\n",
    "    to a Dictionary as a function of the tokens.\n",
    "   \n",
    "    ::character_doc:: a list of pre-processed tokens\n",
    "    ::extra_features:: any extra features for the character to be added to feature vector dict\n",
    "    \"\"\"\n",
    "    from collections import Counter\n",
    "    # print(character_doc)\n",
    "    # Simple count\n",
    "    counts = Counter(character_doc)\n",
    "    tfidf_dict= {}\n",
    "    # N-grams of different lengths\n",
    "    for n in range(1, 2):\n",
    "        n_grams = ngrams(character_doc, n)\n",
    "        counts.update([' '.join(gram) for gram in n_grams])\n",
    "   \n",
    "    # Part-of-Speech tags\n",
    "    pos_tags = pos_tag(character_doc)\n",
    "    pos_tags = [tag[1] for tag in pos_tags]\n",
    "    counts.update(pos_tags)\n",
    "   \n",
    "    # Sentiment analysis\n",
    "    # sia = SentimentIntensityAnalyzer()\n",
    "    # sentiment_scores = sia.polarity_scores(' '.join(character_doc))\n",
    "    # counts.update(sentiment_scores)\n",
    "   \n",
    "    # TF-IDF representation for tokens\n",
    "    # tfidf_vectorizer = TfidfVectorizer()\n",
    "    # tfidf_matrix = tfidf_vectorizer.fit_transform([' '.join(character_doc)])\n",
    " \n",
    "    # # # Convert TF-IDF matrix to a dictionary\n",
    "    # tfidf_dict = dict(zip(tfidf_vectorizer.get_feature_names_out(), tfidf_matrix.toarray()[0]))\n",
    " \n",
    "    # Add token counts to the TF-IDF dictionary\n",
    "    for token, count in counts.items():\n",
    "        tfidf_dict[token] = count\n",
    "   \n",
    "    # Add extra features\n",
    "    # for feature in extra_features:\n",
    "    #     tfidf_dict[feature] = feature\n",
    " \n",
    "    # gender_X = gender_vectorizer.transform([' '.join(character_doc)])\n",
    "    # gender_prediction = gender_classifier.predict(gender_X)[0]\n",
    "    # tfidf_dict['gender_prediction'] = gender_prediction\n",
    "    # print(tfidf_dict)\n",
    "    return tfidf_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Continue.....Matrix transformation techniques like TF-IDF, minimum/maximum document frequency and K-best selection applied (three techniques).**\n",
    "\n",
    "\n",
    "**TfidfVectorizer** is initialized to converts the text documents into a matrix of TF-IDF features with a **minimum document frequency** as passed in mindf parameter and **SelectKBest** with **chi2** and k='all' is used for feature selection based on the chi-squared statistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /home/jovyan/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_selection import SelectKBest, chi2,mutual_info_regression\n",
    "from sklearn.model_selection import ParameterGrid\n",
    "nltk.download('averaged_perceptron_tagger')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_document_matrix_from_corpus(corpus,fitting,sublinear_tf,k,min_df,vectorizer,selector):\n",
    "    \"\"\"Method which fits different vectorizers\n",
    "    on data and returns a matrix.\n",
    "   \n",
    "    ::corpus:: a list of (class_label, document) pairs.\n",
    "    ::fitting:: a boolean indicating whether to fit/train the vectorizers (should be true on training data)\n",
    "    \"\"\"\n",
    " # Define the parameter grid\n",
    "    if fitting:\n",
    "        vectorizer = TfidfVectorizer(sublinear_tf=sublinear_tf,min_df=min_df)  # Initialize vectorizer outside the conditional\n",
    "        # countvector = CountVectorizer()\n",
    "        selector = SelectKBest(chi2, k=k)\n",
    "        # Use TfidfVectorizer instead of DictVectorizer\n",
    "        X = vectorizer.fit_transform([' '.join(to_feature_vector_dictionary(doc, [])) for name, doc in corpus])\n",
    "\n",
    "\n",
    "        # Feature selection (you may need to adjust k)\n",
    "        X = selector.fit_transform(X, [label for label, doc in corpus])\n",
    "\n",
    "        return X, vectorizer, selector\n",
    "    else:\n",
    "        if vectorizer is None:\n",
    "            raise ValueError(\"Vectorizer must be fitted before transforming.\")\n",
    "\n",
    "        # Use the pre-fitted vectorizer\n",
    "        X = vectorizer.transform([' '.join(to_feature_vector_dictionary(doc, [])) for name, doc in corpus])\n",
    "\n",
    "        # Apply the same feature selection as on the training data\n",
    "        X = selector.transform(X)\n",
    "\n",
    "        return X\n",
    "    \n",
    "#training_feature_matrix,_,_ = create_document_matrix_from_corpus(training_corpus, fitting=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "# corpusVectorizer = DictVectorizer()   # corpusVectorizor which will just produce sparse vectors from feature dicts\n",
    "# # Any matrix transformers (e.g. tf-idf transformers) should be initialized here\n",
    "# from sklearn.feature_extraction.text import TfidfTransformer\n",
    "# tfidf_transformer = TfidfTransformer()\n",
    "\n",
    "# def create_document_matrix_from_corpus(corpus, fitting=False):\n",
    "#     \"\"\"Method which fits different vectorizers\n",
    "#     on data and returns a matrix.\n",
    "    \n",
    "#     Currently just does simple conversion to matrix by vectorizing the dictionary. Improve this for Q2.\n",
    "    \n",
    "#     ::corpus:: a list of (class_label, document) pairs.\n",
    "#     ::fitting:: a boolean indicating whether to fit/train the vectorizers (should be true on training data)\n",
    "#     \"\"\"\n",
    "    \n",
    "#     # uses the global variable of the corpus Vectorizer to improve things\n",
    "#     if fitting:\n",
    "#         corpusVectorizer.fit([to_feature_vector_dictionary(doc, []) for name, doc in corpus])\n",
    "#     doc_feature_matrix = corpusVectorizer.transform([to_feature_vector_dictionary(doc, []) for name, doc in corpus])\n",
    "#     doc_tfidf_matrix = tfidf_transformer.fit_transform(doc_feature_matrix) \n",
    "    \n",
    "#     return doc_feature_matrix\n",
    "\n",
    "# training_feature_matrix = create_document_matrix_from_corpus(training_corpus, fitting=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "#training_feature_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lines per character {'Other_None': 26, 'Rachel Green': 30, 'Other_Male': 11, 'Ross Geller': 16, '#ALL#': 4, 'Phoebe Buffay': 30, 'Chandler Bing': 11, 'Monica Geller': 30, 'Joey Tribbiani': 30, 'Other_Female': 1}\n",
      "Num. Characters:  10 \n",
      "\n",
      "Other_None Num of Words:  5345\n",
      "Rachel Green Num of Words:  4980\n",
      "Other_Male Num of Words:  1816\n",
      "Ross Geller Num of Words:  2825\n",
      "#ALL# Num of Words:  709\n",
      "Phoebe Buffay Num of Words:  5506\n",
      "Chandler Bing Num of Words:  2426\n",
      "Monica Geller Num of Words:  6137\n",
      "Joey Tribbiani Num of Words:  6298\n",
      "Other_Female Num of Words:  247\n",
      "total words 36289\n"
     ]
    }
   ],
   "source": [
    "# get the validation data- only 30 lines used for each character\n",
    "val_character_docs = create_character_document_from_dataframe(val_data, max_line_count=30)\n",
    "print('Num. Characters: ',len(val_character_docs.keys()),\"\\n\")\n",
    "total_words = 0\n",
    "for name in val_character_docs.keys():\n",
    "    print(name, 'Num of Words: ',len(val_character_docs[name].split()))\n",
    "    total_words += len(val_character_docs[name].split())\n",
    "print(\"total words\", total_words)\n",
    " \n",
    "# create list of pairs of (character name, pre-processed character)\n",
    "val_corpus = [(name, pre_process(doc)) for name, doc in sorted(val_character_docs.items())]\n",
    "val_labels = [name for name, doc in val_corpus]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Â Just transform the val_feature_matrix, don't fit\n",
    "#val_feature_matrix = create_document_matrix_from_corpus(val_corpus, fitting=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#val_feature_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cosine_similarity(v1, v2):\n",
    "    \"\"\"Takes a pair of vectors v1 and v2 (1-d arrays e.g. [0, 0.5, 0.5])\n",
    "    returns the cosine similarity between the vectors\n",
    "    \"\"\"\n",
    "    \n",
    "    # compute cosine similarity manually\n",
    "    manual_cosine_similarity = np.dot(v1, v2)  /(norm(v1) * norm(v2))\n",
    "    \n",
    "    return manual_cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_IR_evaluation_scores(train_feature_matrix, test_feature_matrix, train_labels, test_labels):\n",
    "    \"\"\"\n",
    "    Computes an information retrieval based on training data feature matrix and test data feature matrix\n",
    "    returns 4-tuple:\n",
    "    ::mean_rank:: mean of the ranking of the target document in terms of similarity to the query/test document\n",
    "    1 is the best possible score.\n",
    "    ::mean_cosine_similarity:: mean cosine similarity score for the target document vs. the test document of the same class\n",
    "    ::accuracy:: proportion of test documents correctly classified\n",
    "    ::df:: a data frame with all the similarity measures of the test documents vs. train documents\n",
    "    \n",
    "    params:\n",
    "    ::train_feature_matrix:: a numpy matrix N x M shape where N = number of characters M = number of features\n",
    "    ::test_feature_matrix::  a numpy matrix N x M shape where N = number of characters M = number of features\n",
    "    ::train_labels:: a list of character names for the training data in order consistent with train_feature_matrix\n",
    "    ::test_labels:: a list of character names for the test data in order consistent with test_feature_matrix\n",
    "    \"\"\"\n",
    "    rankings = []\n",
    "    all_cosine_similarities = []\n",
    "    pairwise_cosine_similarity = []\n",
    "    pairs = []\n",
    "    correct = 0\n",
    "    for i, target in enumerate(test_labels):\n",
    "        # compare the left out character against the mean\n",
    "        idx = i \n",
    "        fm_1 = test_feature_matrix.toarray()[idx]\n",
    "        all_sims = {}\n",
    "        # print(\"target:\", target)\n",
    "        for j, other in enumerate(train_labels):\n",
    "            fm_2 = train_feature_matrix.toarray()[j]\n",
    "            manual_cosine_similarity = compute_cosine_similarity(fm_1, fm_2)\n",
    "            pairs.append((target, other))\n",
    "            pairwise_cosine_similarity.append(manual_cosine_similarity)\n",
    "            if other == target:\n",
    "                all_cosine_similarities.append(manual_cosine_similarity)\n",
    "            all_sims[other] = manual_cosine_similarity\n",
    "\n",
    "            # print(target, other, manual_cosine_similarity)\n",
    "        sorted_similarities = sorted(all_sims.items(),key=lambda x:x[1],reverse=True)\n",
    "        # print(sorted_similarities)\n",
    "        ranking = {key[0]: rank for rank, key in enumerate(sorted_similarities, 1)}\n",
    "        # print(\"Ranking for target\", ranking[target])\n",
    "        if ranking[target] == 1:\n",
    "            correct += 1\n",
    "        rankings.append(ranking[target])\n",
    "        # print(\"*****\")\n",
    "    mean_rank = np.mean(rankings)\n",
    "    mean_cosine_similarity = np.mean(all_cosine_similarities)\n",
    "    accuracy = correct/len(test_labels)\n",
    "    print(\"mean rank\", np.mean(rankings))\n",
    "    print(\"mean cosine similarity\", mean_cosine_similarity)\n",
    "    print(correct, \"correct out of\", len(test_labels), \"/ accuracy:\", accuracy )\n",
    "    \n",
    "    # get a dafaframe showing all the similarity scores of training vs test docs\n",
    "    df = pd.DataFrame({'doc1': [x[0] for x in pairs], 'doc2': [x[1] for x in pairs],\n",
    "                       'similarity': pairwise_cosine_similarity})\n",
    "\n",
    "    # display characters which are most similar and least similar\n",
    "    df.loc[[df.similarity.values.argmax(), df.similarity.values.argmin()]]\n",
    "    return (mean_rank, mean_cosine_similarity, accuracy, df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Parameter Search**\n",
    "\n",
    "Here is breakdown of code:\n",
    "\n",
    "1. **Parameter Grid**: \n",
    "   - `param_grid` defines a dictionary of parameters for a `TfidfVectorizer` and a feature selector `SelectKBest`. Parameters include `tfidf__sublinear_tf` (`True`), `tfidf__min_df` (minimum document frequency with values 2), and `select_k__k` (1000, 2000, and 'all').\n",
    "\n",
    "2. **Generating Parameter Combinations**:\n",
    "   - `ParameterGrid(param_grid)` creates a list of all possible combinations of these parameters.\n",
    "\n",
    "3. **Initializing Variables for Best Score and Parameters**:\n",
    "   - `best_score` is initialized to 5 (a starting point), and `best_params` is initialized to `None`. \n",
    "\n",
    "4. **Iterating Over Parameter Combinations**:\n",
    "   - The code iterates through each parameter combination. For each combination, it extracts the values of `k`, `mindf`, and `sublinear_tf` using `params.values()`.\n",
    "\n",
    "5. **Creating Document Matrices**:\n",
    "   - It attempts to create feature matrices for both training and validation datasets using the`create_document_matrix_from_corpus` function, with the current parameters.\n",
    "   - If an error occurs during this process, it prints \"Error\" and continues to the next iteration.\n",
    "\n",
    "6. **Comparing and Storing the Best Score**:\n",
    "   - The code compares the mean rank from each parameter combination to the current best score. If it finds a lower mean rank. It updates `best_score` and `best_params` with the new values.\n",
    "\n",
    "7. **Print Best Parameters and Score**:\n",
    "   - After completing the iterations, the code prints the best score and the parameters that achieved this score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " {'select_k__k': 1000, 'tfidf__min_df': 2, 'tfidf__sublinear_tf': True} \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2598/458658103.py:7: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  manual_cosine_similarity = np.dot(v1, v2)  /(norm(v1) * norm(v2))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean rank 5.1\n",
      "mean cosine similarity nan\n",
      "0 correct out of 10 / accuracy: 0.0\n",
      "\n",
      " {'select_k__k': 1000, 'tfidf__min_df': 5, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "mean rank 4.9\n",
      "mean cosine similarity 0.20369143713572715\n",
      "1 correct out of 10 / accuracy: 0.1\n",
      "\n",
      " {'select_k__k': 1000, 'tfidf__min_df': 10, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "Error\n",
      "\n",
      " {'select_k__k': 2000, 'tfidf__min_df': 2, 'tfidf__sublinear_tf': True} \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2598/458658103.py:7: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  manual_cosine_similarity = np.dot(v1, v2)  /(norm(v1) * norm(v2))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean rank 4.6\n",
      "mean cosine similarity nan\n",
      "0 correct out of 10 / accuracy: 0.0\n",
      "\n",
      " {'select_k__k': 2000, 'tfidf__min_df': 5, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "mean rank 3.9\n",
      "mean cosine similarity 0.4034230024554968\n",
      "1 correct out of 10 / accuracy: 0.1\n",
      "\n",
      " {'select_k__k': 2000, 'tfidf__min_df': 10, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "Error\n",
      "\n",
      " {'select_k__k': 'all', 'tfidf__min_df': 2, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "mean rank 5.8\n",
      "mean cosine similarity 0.28205613007985997\n",
      "1 correct out of 10 / accuracy: 0.1\n",
      "\n",
      " {'select_k__k': 'all', 'tfidf__min_df': 5, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "mean rank 5.1\n",
      "mean cosine similarity 0.45801989446195784\n",
      "1 correct out of 10 / accuracy: 0.1\n",
      "\n",
      " {'select_k__k': 'all', 'tfidf__min_df': 10, 'tfidf__sublinear_tf': True} \n",
      "\n",
      "mean rank 6.8\n",
      "mean cosine similarity 0.7751685051280898\n",
      "0 correct out of 10 / accuracy: 0.0\n",
      "Best score: 3.9\n",
      "Best parameters: {'select_k__k': 2000, 'tfidf__min_df': 5, 'tfidf__sublinear_tf': True}\n"
     ]
    }
   ],
   "source": [
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'tfidf__sublinear_tf': [True],\n",
    "    'tfidf__min_df':  [2,5,10],\n",
    "    'select_k__k': [1000, 2000, 'all'],\n",
    "   \n",
    "}\n",
    "\n",
    "# Generate all combinations of parameters\n",
    "parameter_combinations = list(ParameterGrid(param_grid))\n",
    "\n",
    "\n",
    "# Variables to store the best score and corresponding parameters\n",
    "best_score = 5\n",
    "best_params = None\n",
    "\n",
    "for params in parameter_combinations:\n",
    "  print(\"\\n\",params,\"\\n\")\n",
    "  k,mindf,sublinear_tf= params.values()\n",
    "  try :\n",
    "      training_feature_matrix, vectorizer, selector = create_document_matrix_from_corpus(training_corpus,True,sublinear_tf,k,mindf,None,None)\n",
    "\n",
    "      val_feature_matrix = create_document_matrix_from_corpus(val_corpus,False,sublinear_tf,k,mindf,vectorizer,selector)\n",
    "  except :\n",
    "    print(\"Error\")\n",
    "    continue\n",
    "\n",
    "  mean_rank, mean_cosine_simliarity, acc, df = compute_IR_evaluation_scores(training_feature_matrix, val_feature_matrix, train_labels, val_labels)\n",
    "\n",
    "  # Compare and store the best score and parameters\n",
    "  if mean_rank < best_score:\n",
    "      best_score = mean_rank\n",
    "      best_params = params\n",
    "\n",
    "# Output the best parameters and their score\n",
    "print(\"Best score:\", best_score)\n",
    "print(\"Best parameters:\", best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_heat_map_similarity(df):\n",
    "    \"\"\"Takes a dataframe with header 'doc1, doc2, similarity'\n",
    "    Plots a heatmap based on the similarity scores.\n",
    "    \"\"\"\n",
    "    test_labels =  sorted(list(set(df.sort_values(['doc1'])['doc1'])))\n",
    "    # add padding 1.0 values to either side\n",
    "    cm = [[1.0,] * (len(test_labels)+2)]\n",
    "    for target in test_labels:\n",
    "        new_row = [1.0]\n",
    "        for x in df.sort_values(['doc1', 'doc2'])[df['doc1']==target]['similarity']:\n",
    "            new_row.append(x)\n",
    "        new_row.append(1.0)\n",
    "        cm.append(new_row)\n",
    "    cm.append([1.0,] * (len(test_labels)+2))\n",
    "    #print(cm)\n",
    "    labels = [\"\"] + test_labels + [\"\"]\n",
    "    fig = plt.figure(figsize=(20,20))\n",
    "    ax = fig.add_subplot(111)\n",
    "    cax = ax.matshow(cm)\n",
    "    plt.title('Similarity matrix between documents as vectors')\n",
    "    fig.colorbar(cax)\n",
    "    ax.set_xticks(np.arange(len(labels)))\n",
    "    ax.set_yticks(np.arange(len(labels)))\n",
    "    ax.set_xticklabels( labels, rotation=45)\n",
    "    ax.set_yticklabels( labels)\n",
    "\n",
    "    for i in range(len(cm)):\n",
    "        for j in range(len(cm)):\n",
    "\n",
    "            text = ax.text(j, i, round(cm[i][j],3),\n",
    "                           ha=\"center\", va=\"center\", color=\"w\")\n",
    "\n",
    "    plt.xlabel('Training Vector Doc')\n",
    "    plt.ylabel('Test Vector Doc')\n",
    "    #fig.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean rank 3.9\n",
      "mean cosine similarity 0.4034230024554968\n",
      "1 correct out of 10 / accuracy: 0.1\n"
     ]
    }
   ],
   "source": [
    "k,mindf,sublinear_tf= best_params.values()\n",
    "\n",
    "training_feature_matrix, vectorizer, selector = create_document_matrix_from_corpus(training_corpus,True,sublinear_tf,k,mindf,None,None)\n",
    "\n",
    "val_feature_matrix = create_document_matrix_from_corpus(val_corpus,False,sublinear_tf,k,mindf,vectorizer,selector)\n",
    "\n",
    "mean_rank, mean_cosine_simliarity, acc, df = compute_IR_evaluation_scores(training_feature_matrix, val_feature_matrix, train_labels, val_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           doc1            doc2  similarity\n",
      "0         #ALL#           #ALL#    0.287332\n",
      "1         #ALL#   Chandler Bing    0.246378\n",
      "2         #ALL#  Joey Tribbiani    0.233832\n",
      "3         #ALL#   Monica Geller    0.243053\n",
      "4         #ALL#    Other_Female    0.283995\n",
      "..          ...             ...         ...\n",
      "95  Ross Geller      Other_Male    0.373658\n",
      "96  Ross Geller      Other_None    0.367309\n",
      "97  Ross Geller   Phoebe Buffay    0.381620\n",
      "98  Ross Geller    Rachel Green    0.380256\n",
      "99  Ross Geller     Ross Geller    0.377621\n",
      "\n",
      "[100 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analyse the similarity results**\n",
    "\n",
    "The given similarity matrix shows how similar each document (or character vector in this context) is to every other document, the values range from 0 to 1, where 1 indicates a very high similarity, and values closer to 0 indicate lower similarity. The diagonal is filled with 1s because it represents each character's similarity with themselves, which is always the highest.\n",
    "\n",
    "**Closest Characters:**\n",
    "\n",
    "`Chandler Bing:` The character vector closest to Chandler that is not Chandler himself appears to be Joey Tribbiani, given the high similarity score of around 0.49. This suggests that Chandler and Joey might share similar language patterns, topics, or have interactions that make their dialogue representation similar.\n",
    "\n",
    "`Phoebe Buffay:` Phoebe's dialogue is most similar to Joey's, excluding her own, with a similarity score close to 0.49.\n",
    "\n",
    "`Joey Tribbiani:` Aside from his own vector, Joeyâ€™s closest match is also Chandler Bing for the same reasons mentioned above.\n",
    "\n",
    "`Monica Geller:` Monica's closest non-identical character vector seems to be Ross Geller, with a similarity score of approximately 0.469. Given that Monica and Ross are siblings in the show, itâ€™s plausible that they share similar speech patterns or discuss family-related topics.\n",
    "\n",
    "`Rachel Green:` Rachel's closest match, discounting herself, appears to be Joey once again, with a similarity score of approximately 0.459.\n",
    "\n",
    "`Ross Geller:` Ross's vector is most closely aligned with Monica's, with a score around 0.467.\n",
    "\n",
    "\n",
    "**Furthest Characters:**\n",
    "\n",
    "`Chandler Bing:` The furthest character from Chandler seems to be the \"Other_Female\" category, with a similarity score around 0.214.\n",
    "\n",
    "`Phoebe Buffay:` Phoebe's dialogue shows the least similarity with \"Other_Male\", with a score around 0.175.\n",
    "\n",
    "`Joey Tribbiani:` Joey's dialogue is least similar to \"Other_Female\" as well, with a similarity score near 0.175.\n",
    "\n",
    "`Monica Geller:` The character vector furthest from Monica is \"Other_Female\" with a score of approximately 0.179.\n",
    "\n",
    "`Rachel Green:`Rachel's least similar vector is also \"Other_Female\", with a score close to 0.177.\n",
    "\n",
    "`Ross Geller:` For Ross, the furthest vector is \"Other_Female\" with a similarity score around 0.174.\n",
    "\n",
    "\n",
    "`\"Other_Female\"` seems furthest from the main cast. This could be due to a different role or context in which \"Other_Female\" characters appear in the show.\n",
    "Conversely, the similarity between the main characters like `Joey, Chandler, Ross, and Monica` because of their frequent interactions and shared storylines, which lead to them using similar language and discussing similar topics. Phoebe stands out slightly from the group, which could reflect her unique and often quirky dialogue in the show.\n",
    "\n",
    "Several **linguistic and contextual factor** can consider to check  highest match between the target character in the training set and that character's vector in the held-out set:\n",
    "Such as **Dialogue Context, Vocabulary and Topics, Interactions with Other Characters, Amount of Dialogue, Speech Style and Idiosyncrasies, Model Limitations**(The choice of features (e.g. I used n-grams(1,2)) and the vectorization technique (e.g.I used TF-IDF vectorizer, SelectKBest and chi2 ) might not capture the nuances necessary for distinguishing characters effectively)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x2000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_heat_map_similarity(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Run on final test data**\n",
    "\n",
    "\n",
    "**1.\tMean Rank:** The average position where the correct document is ranked by the model is `4.1 for testing and 3.3 for validation` after `pre-processing, linguistic feature extraction , group by dialogue and scene and applied grid search`. The lower mean rank in validation indicates that the correct documents tend to be ranked closer to the top of the list compared to the testing dataset.\n",
    "\n",
    "**2.\tMean Cosine Similarity:** The average cosine similarity score is a measure of how similar the document vectors are to each other. Higher scores indicate more similarity between documents. `The validation set has a slightly higher mean cosine similarity (0.3973) than the testing set (0.3915)`, suggesting that the documents in the validation set are more similar to each other than those in the testing set.\n",
    "\n",
    "\n",
    "**3.\tAccuracy:** The accuracy indicates the proportion of documents that were correctly identified as the most relevant. The model has an accuracy of `0.1 (10%) in the testing set and 0.3 (30%) in the validation set`, meaning it correctly identified the most relevant document 1 out of 10 times in testing and 3 out of 10 times in validation.\n",
    "\n",
    "\n",
    "The model does better with the validation data, probably because this data is more like what it was trained on or it's simpler for the model to understand. It gets the right answer more often with validation than with testing, which could mean the validation data is less complicated or has clearer patterns that the model recognizes. The slightly better similarity scores with the validation set suggest that these documents are more similar to each other. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lines per character {'Monica Geller': 300, 'Joey Tribbiani': 281, 'Chandler Bing': 300, 'Phoebe Buffay': 282, '#ALL#': 59, 'Ross Geller': 300, 'Rachel Green': 300, 'Other_None': 255, 'Other_Female': 92, 'Other_Male': 42}\n",
      "Num. Characters:  10 \n",
      "\n",
      "Monica Geller Number of Words:  55403\n",
      "Joey Tribbiani Number of Words:  54203\n",
      "Chandler Bing Number of Words:  63186\n",
      "Phoebe Buffay Number of Words:  58795\n",
      "#ALL# Number of Words:  11233\n",
      "Ross Geller Number of Words:  56625\n",
      "Rachel Green Number of Words:  57637\n",
      "Other_None Number of Words:  57361\n",
      "Other_Female Number of Words:  18252\n",
      "Other_Male Number of Words:  10429\n",
      "total words 443124\n",
      "lines per character {'Ross Geller': 30, 'Joey Tribbiani': 11, 'Chandler Bing': 24, 'Other_Female': 14, 'Other_None': 30, '#ALL#': 4, 'Monica Geller': 30, 'Rachel Green': 23, 'Phoebe Buffay': 30, 'Other_Male': 7}\n",
      "Num. Characters:  10 \n",
      "\n",
      "Ross Geller Number of Words:  3956\n",
      "Joey Tribbiani Number of Words:  1568\n",
      "Chandler Bing Number of Words:  4959\n",
      "Other_Female Number of Words:  2742\n",
      "Other_None Number of Words:  5708\n",
      "#ALL# Number of Words:  536\n",
      "Monica Geller Number of Words:  5173\n",
      "Rachel Green Number of Words:  3681\n",
      "Phoebe Buffay Number of Words:  6640\n",
      "Other_Male Number of Words:  1543\n",
      "mean rank 3.4\n",
      "mean cosine similarity 0.41060125708980894\n",
      "3 correct out of 10 / accuracy: 0.3\n"
     ]
    }
   ],
   "source": [
    "# redo on training data with the first 300 character lines used\n",
    "train_character_docs = create_character_document_from_dataframe(train_data, max_line_count=300)\n",
    "print('Num. Characters: ',len(train_character_docs.keys()),\"\\n\")\n",
    "total_words = 0\n",
    "for name in train_character_docs.keys():\n",
    "    print(name, 'Number of Words: ',len(train_character_docs[name].split()))\n",
    "    total_words += len(train_character_docs[name].split())\n",
    "print(\"total words\", total_words)\n",
    "\n",
    "training_corpus = [(name, pre_process(doc)) for name, doc in sorted(train_character_docs.items())]\n",
    "train_labels = [name for name, doc in training_corpus]\n",
    "\n",
    "#print(training_corpus)\n",
    "\n",
    "k,mindf,sublinear_tf= best_params.values()\n",
    "\n",
    "training_feature_matrix, vectorizer, selector = create_document_matrix_from_corpus(training_corpus,True,sublinear_tf,k,mindf,None,None)\n",
    "\n",
    "# get the test data using 40 lines per character\n",
    "test_character_docs = create_character_document_from_dataframe(test_data, max_line_count=30)\n",
    "print('Num. Characters: ',len(test_character_docs.keys()),\"\\n\")\n",
    "total_words = 0\n",
    "for name in test_character_docs.keys():\n",
    "    print(name, 'Number of Words: ',len(test_character_docs[name].split()))\n",
    "    total_words += len(test_character_docs[name].split())\n",
    "#print(\"total words\", total_words)\n",
    "\n",
    "# create list of pairs of (character name, pre-processed character) \n",
    "test_corpus = [(name, pre_process(doc)) for name, doc in sorted(test_character_docs.items())]\n",
    "test_labels = [name for name, doc in test_corpus]\n",
    "\n",
    "\n",
    "#Â Just transform the val_feature_matrix, don't fit\n",
    "test_feature_matrix = create_document_matrix_from_corpus(test_corpus,False,sublinear_tf,k,mindf,vectorizer,selector)\n",
    "\n",
    "\n",
    "mean_rank, mean_cosine_simliarity, acc, df = compute_IR_evaluation_scores(training_feature_matrix, test_feature_matrix, train_labels, test_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
